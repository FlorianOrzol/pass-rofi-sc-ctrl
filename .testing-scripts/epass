#!/bin/bash

PATH_TO_PASS="/home/$(whoami)/.password-store"



function information {
    # yellow
    echo -e "\e[93m$1\e[0m"
}

function enter {
    while true; do
        information "$1"
        read input
        information "correct? (Y/n)"
        read confirm
        # if confirm is empty or y or Y
        if [ -z "$confirm" ] || [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
            echo "$input"
            break
        fi
    done
}

function password {
    while true; do
        information "Password: "
        read -s input
        information "correct? (Y/n)"
        read confirm
        # if confirm is empty or y or Y
        if [ -z "$confirm" ] || [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
            echo "$input"
            break
        fi
    done
}


function new {
    # enter your term
    read -p "Term: " term
    username=$(enter "Username: ")
    read -p "Username: " username
    read -s -p "Password: " pass
    read -p "email: " email

    information "Open a browser and navigate to the login-website you want to save the credentials for."
    information "It works also with other programs that require a password."
    information "Do you need url and title? (Y/n)"
    read confirm
    # if confirm is empty or y or Y
    if [ -z "$confirm" ] || [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
        information "Please click on the window you want to save the credentials for."
        title=$(xdotool selectwindow getwindowname)
        # title all before last -
        title=$(echo $title | rev | cut -d'-' -f2- | rev)
        read -p "URL: " url
        # remove https:// und http://
        url_name=$(echo $url | sed 's/https\?:\/\///')
        # remove www.
        url_name=$(echo $url_name | sed 's/www\.//')
        # remove all after /
        url_name=$(echo $url_name | sed 's/\/.*//')
    else
        title="-"
        url="-"
        url_name="-"
    fi

    # save credentials
    echo -n "$username" | pass insert --echo "$term/name/$username"
    echo -n "$pass" | pass insert --echo "$term/pass"
    echo -n "$email" | pass insert --echo "$term/email/$email"
    echo -n "$url" | pass insert -m -f "$term/urls/$url_name"
    echo -n "$title" | pass insert -m -f "$term/titles/$title"

    while true; do
        information "Do you want enter more urls? (y/N)"
        read confirm
        # if confirm is empty or y or Y
        if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
            information "Open a browser and navigate to the login-website you want to save the credentials for."
            information "It works also with other programs that require a password."
            information "press enter to continue"
            read
            title=$(xdotool selectwindow getwindowname)
            title=$(echo $title | rev | cut -d'-' -f2- | rev)
            url=$(enter "URL: ")
            # remove https:// und http://
            url_name=$(echo $url | sed 's/https\?:\/\///')
            # remove www.
            url_name=$(echo $url_name | sed 's/www\.//')
            # remove all after /
            url_name=$(echo $url_name | sed 's/\/.*//')
            echo -n "$title" | pass insert -m -f "$term/titles/$title"
            echo -n "$url" | pass insert -m -f "$term/urls/$url_name"

        else
            break
        fi

    done

    
}

function test-zw {

# Speichern Sie den aktuellen Inhalt der Zwischenablage
alter_inhalt=$(xclip -selection clipboard -o)
echo "start"

while true; do
    # Überprüfen Sie den aktuellen Inhalt der Zwischenablage
    neuer_inhalt=$(xclip -selection clipboard -o)

    # Vergleichen Sie den neuen Inhalt mit dem alten Inhalt
    if [[ "$neuer_inhalt" != "$alter_inhalt" ]]; then
        # Wenn der Inhalt geändert wurde, führen Sie eine Aktion aus
        echo "Die Zwischenablage wurde geändert!"

        # Aktualisieren Sie den alten Inhalt
        alter_inhalt=$neuer_inhalt
ls -1 ~/.password-store | rofi -dmenu
        exit 0
    else
    fi

    # Warten Sie eine kurze Zeit, bevor Sie den nächsten Check durchführen
    sleep 0.5
done

}


function edit {
    # enter your term
    ls -la
}



function find_name_by_title {
    title="$1"
    term=$(ls -1 $PATH_TO_PASS/*/titles/"${title}.gpg" | awk -F/ '{ print $5 }')
    name=$(ls -1 $PATH_TO_PASS/$term/name/* | awk -F/ '{ print $7 }' | sed 's/.gpg//g')
    pass show -c $term/name/$name # copy to clipboard
    echo $name
}

function find_pass_by_title {
    title=$1
    term=$(ls -1 $PATH_TO_PASS/*/titles/"$title.gpg" | awk -F/ '{ print $5 }')
    pass=$(pass show $term/pass)
    pass show -c $term/pass # copy to clipboard
    echo $pass
}



function get-window-information {
    local pid=$1
    local name=$(xdotool getwindowname $pid)
    name=$(echo "$name" | rev | cut -d'-' -f2- | rev)
    local class=$(xdotool getwindowclassname $pid)
    local arrach=("$pid", "$name", "$class")
    echo ${arrach[@]}
}

function select-window {
    local pid=$(xdotool selectwindow)
    local array=$(get-window-information $pid)
    echo $array
}

function active-window {
    local pid=$(xdotool getactivewindow)
    local array=$(get-window-information $pid)
    echo $array
}

function new-pass {
    # TODO
    identifier=$1 # title, url, none
    autofill=$2 # username|email|none, enter|tab, password|none, enter|none
}    
 #   title=$(echo "$title" | rev | cut -d'-' -f2- | rev)
    


function find-term-by-current-windowtitle {
    title="$1"
    title=$(echo "$title" | rev | cut -d'-' -f2- | rev)
    term=$(ls -1 $PATH_TO_PASS/*/titles/"$title.gpg" | awk -F/ '{ print $5 }')
    echo $term
}

function find-term-by-select-windowtitle {
    information "Please click on the window you want to save the credentials for."
    title=$(xdotool selectwindow getwindowname)
    title=$(echo "$title" | rev | cut -d'-' -f2- | rev)
    echo $title
}

function current-window {
    title=$(xdotool getactivewindow getwindowname)
    title=$(echo "$title" | rev | cut -d'-' -f2- | rev)
    echo $title
}

function write-name {
    term=$1
    name=$(ls -1 $PATH_TO_PASS/$term/name/* | awk -F/ '{ print $7 }' | sed 's/.gpg//g')
    (pass show -c $term/name/$name > /dev/null 2>&1 &) # copy to clipboard
    echo $name
}

function copy-pass {
    (pass show -c $1/pass > /dev/null 2>&1 &) # copy to clipboard
}

if [[ $1 == "test" ]]; then # zum testen
    #select-window
    test-zw
    exit 0
fi

case $1 in
    title)
        case $2 in
            cur)
                entered_title=$(current-window)
                get_term=$(find-by-title $entered_title)
                what=$3
                ;;
            sel)
                entered_title=$(select-window)
                get_term=$(find-by-title $entered_title)
                what=$3
                ;;
            man)
                entered_title="$3"
                get_term=$(find-by-title "$entered_title")
                what=$4
                ;;
        esac
        ;;
    search)
        get_term=$(search-term $2)
        what=$3
        ;;
esac

case $what in
    name)
        echo $(write-name $get_term)
        ;;
    pass)
        copy-pass $get_term
        ;;
esac







# edit oreders
# ls -1 .password-store | rofi -p "Eintrag: " -dmenu
# rofi -p "Geben Sie einen Text ein: "  -output -dmenu
# ls -1 | rofi -dmenu -p "file" -filter " dok"
# rofi-theme-selector






#function enter-name {
#    # URL der Website abrufen
#    title=$1
#    title=$(echo $title | rev | cut -d'-' -f2- | rev)
            
#    name=$(ls -1 $PATH_TO_PASS/*/titles/'${title}.gpg' | awk -F/ '{ print $4 }')

#    # Benutzername aus `pass` abrufen
#    username=$(pass show -c "$url" | grep -oP '(?<=name: ).*' | sed 's/[^[:alnum:]_]//g')

#    # Passwort aus `pass` abrufen
#    password=$(pass show -c "$url" | grep -oP '(?<=pass: ).*' | sed 's/[^[:alnum:]_]//g')

#    # Benutzername und Passwort in die Felder einfügen
#    xdotool type --cleartext 1 "$username"
#    xdotool type --delay 100 --cleartext 2 "$password"
#    xdotool key --window 1 Return
#}





# TODO: integrate information
    #ls -1 .password-store/*/name/* | awk -F/ '{ print $2 " - " $4 }'
#                    information "Do you want to hide the information? (y/N)"
#                    read confirm
#                    # if confirm is empty or n or N
#                    if [ -z "$confirm" ] || [ "$confirm" == "n" ] || [ "$confirm" == "N" ]; then
#                        information "Please enter the information you want to save."
#                        information "Press enter to finish."
#                        information "Press Ctrl+D to finish."
#                        cat > /tmp/pass
#                        pass insert -m -f "$term/other" < /tmp/pass
#                    else
#                        information "Please enter the information you want to save."
#                        information "Press enter to finish."
#                        information "Press Ctrl+D to finish."
#                        cat > /tmp/pass
#                        pass insert -m -f "$term/other" < /tmp/pass
#                    fi

#                    ;;
#                5)
#                    break
#                    ;;
#                *)
#                    information "Please enter a number between 1 and 5."
#                    ;;
#            esac